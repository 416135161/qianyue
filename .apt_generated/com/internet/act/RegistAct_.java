//
// DO NOT EDIT THIS FILE, IT HAS BEEN GENERATED USING AndroidAnnotations 3.0.1.
//


package com.internet.act;

import android.app.Activity;
import android.content.Context;
import android.content.Intent;
import android.os.Bundle;
import android.os.Handler;
import android.os.Looper;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.ViewGroup.LayoutParams;
import android.widget.Button;
import android.widget.CheckBox;
import android.widget.CompoundButton;
import android.widget.CompoundButton.OnCheckedChangeListener;
import android.widget.EditText;
import com.internet.http.api.ApiException;
import com.internet.qianyue.R.id;
import com.internet.qianyue.R.layout;
import org.androidannotations.api.BackgroundExecutor;
import org.androidannotations.api.view.HasViews;
import org.androidannotations.api.view.OnViewChangedListener;
import org.androidannotations.api.view.OnViewChangedNotifier;

public final class RegistAct_
    extends RegistAct
    implements HasViews, OnViewChangedListener
{

    private final OnViewChangedNotifier onViewChangedNotifier_ = new OnViewChangedNotifier();
    private Handler handler_ = new Handler(Looper.getMainLooper());

    @Override
    public void onCreate(Bundle savedInstanceState) {
        OnViewChangedNotifier previousNotifier = OnViewChangedNotifier.replaceNotifier(onViewChangedNotifier_);
        init_(savedInstanceState);
        super.onCreate(savedInstanceState);
        OnViewChangedNotifier.replaceNotifier(previousNotifier);
        setContentView(layout.act_regist);
    }

    private void init_(Bundle savedInstanceState) {
        OnViewChangedNotifier.registerOnViewChangedListener(this);
    }

    @Override
    public void setContentView(int layoutResID) {
        super.setContentView(layoutResID);
        onViewChangedNotifier_.notifyViewChanged(this);
    }

    @Override
    public void setContentView(View view, LayoutParams params) {
        super.setContentView(view, params);
        onViewChangedNotifier_.notifyViewChanged(this);
    }

    @Override
    public void setContentView(View view) {
        super.setContentView(view);
        onViewChangedNotifier_.notifyViewChanged(this);
    }

    public static RegistAct_.IntentBuilder_ intent(Context context) {
        return new RegistAct_.IntentBuilder_(context);
    }

    public static RegistAct_.IntentBuilder_ intent(android.app.Fragment fragment) {
        return new RegistAct_.IntentBuilder_(fragment);
    }

    public static RegistAct_.IntentBuilder_ intent(android.support.v4.app.Fragment supportFragment) {
        return new RegistAct_.IntentBuilder_(supportFragment);
    }

    @Override
    public void onViewChanged(HasViews hasViews) {
        mEdit_pwd = ((EditText) hasViews.findViewById(id.mEdit_pwd));
        mEdit_code = ((EditText) hasViews.findViewById(id.mEdit_code));
        checkbox = ((CheckBox) hasViews.findViewById(id.checkbox));
        btn_acquire = ((Button) hasViews.findViewById(id.btn_acquire));
        btn_next = ((Button) hasViews.findViewById(id.btn_next));
        mEdit_mobile = ((EditText) hasViews.findViewById(id.mEdit_mobile));
        {
            View view = hasViews.findViewById(id.btn_next);
            if (view!= null) {
                view.setOnClickListener(new OnClickListener() {


                    @Override
                    public void onClick(View view) {
                        RegistAct_.this.next();
                    }

                }
                );
            }
        }
        {
            View view = hasViews.findViewById(id.btn_acquire);
            if (view!= null) {
                view.setOnClickListener(new OnClickListener() {


                    @Override
                    public void onClick(View view) {
                        RegistAct_.this.acquire();
                    }

                }
                );
            }
        }
        {
            View view = hasViews.findViewById(id.text_cancel);
            if (view!= null) {
                view.setOnClickListener(new OnClickListener() {


                    @Override
                    public void onClick(View view) {
                        RegistAct_.this.cancel();
                    }

                }
                );
            }
        }
        {
            View view = hasViews.findViewById(id.text_protocol);
            if (view!= null) {
                view.setOnClickListener(new OnClickListener() {


                    @Override
                    public void onClick(View view) {
                        RegistAct_.this.clickProtocol();
                    }

                }
                );
            }
        }
        {
            CompoundButton view = ((CompoundButton) hasViews.findViewById(id.checkbox));
            if (view!= null) {
                view.setOnCheckedChangeListener(new OnCheckedChangeListener() {


                    @Override
                    public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) {
                        RegistAct_.this.checkedChange(buttonView);
                    }

                }
                );
            }
        }
    }

    @Override
    public void fullScreen(final boolean enable) {
        handler_.post(new Runnable() {


            @Override
            public void run() {
                RegistAct_.super.fullScreen(enable);
            }

        }
        );
    }

    @Override
    public void showToast(final String content) {
        handler_.post(new Runnable() {


            @Override
            public void run() {
                RegistAct_.super.showToast(content);
            }

        }
        );
    }

    @Override
    public void closeInputKeyboard() {
        handler_.postDelayed(new Runnable() {


            @Override
            public void run() {
                RegistAct_.super.closeInputKeyboard();
            }

        }
        , 200L);
    }

    @Override
    public void closeLoading() {
        handler_.post(new Runnable() {


            @Override
            public void run() {
                RegistAct_.super.closeLoading();
            }

        }
        );
    }

    @Override
    public void onApiException(final ApiException ex) {
        handler_.post(new Runnable() {


            @Override
            public void run() {
                RegistAct_.super.onApiException(ex);
            }

        }
        );
    }

    @Override
    public void showLoading() {
        handler_.post(new Runnable() {


            @Override
            public void run() {
                RegistAct_.super.showLoading();
            }

        }
        );
    }

    @Override
    public void showLoading(final String tip) {
        handler_.post(new Runnable() {


            @Override
            public void run() {
                RegistAct_.super.showLoading(tip);
            }

        }
        );
    }

    @Override
    public void goToRegistDspAct() {
        handler_.post(new Runnable() {


            @Override
            public void run() {
                RegistAct_.super.goToRegistDspAct();
            }

        }
        );
    }

    @Override
    public void goToMainAct() {
        handler_.post(new Runnable() {


            @Override
            public void run() {
                RegistAct_.super.goToMainAct();
            }

        }
        );
    }

    @Override
    public void sendCodeInvalid() {
        handler_.post(new Runnable() {


            @Override
            public void run() {
                RegistAct_.super.sendCodeInvalid();
            }

        }
        );
    }

    @Override
    public void sendCodeValid() {
        handler_.postDelayed(new Runnable() {


            @Override
            public void run() {
                RegistAct_.super.sendCodeValid();
            }

        }
        , 1000L);
    }

    @Override
    public void doBack() {
        BackgroundExecutor.execute(new BackgroundExecutor.Task("", 0, "") {


            @Override
            public void execute() {
                try {
                    RegistAct_.super.doBack();
                } catch (Throwable e) {
                    Thread.getDefaultUncaughtExceptionHandler().uncaughtException(Thread.currentThread(), e);
                }
            }

        }
        );
    }

    @Override
    public void regist() {
        BackgroundExecutor.execute(new BackgroundExecutor.Task("", 0, "") {


            @Override
            public void execute() {
                try {
                    RegistAct_.super.regist();
                } catch (Throwable e) {
                    Thread.getDefaultUncaughtExceptionHandler().uncaughtException(Thread.currentThread(), e);
                }
            }

        }
        );
    }

    @Override
    public void sendCode() {
        BackgroundExecutor.execute(new BackgroundExecutor.Task("", 0, "") {


            @Override
            public void execute() {
                try {
                    RegistAct_.super.sendCode();
                } catch (Throwable e) {
                    Thread.getDefaultUncaughtExceptionHandler().uncaughtException(Thread.currentThread(), e);
                }
            }

        }
        );
    }

    public static class IntentBuilder_ {

        private Context context_;
        private final Intent intent_;
        private android.app.Fragment fragment_;
        private android.support.v4.app.Fragment fragmentSupport_;

        public IntentBuilder_(Context context) {
            context_ = context;
            intent_ = new Intent(context, RegistAct_.class);
        }

        public IntentBuilder_(android.app.Fragment fragment) {
            fragment_ = fragment;
            context_ = fragment.getActivity();
            intent_ = new Intent(context_, RegistAct_.class);
        }

        public IntentBuilder_(android.support.v4.app.Fragment fragment) {
            fragmentSupport_ = fragment;
            context_ = fragment.getActivity();
            intent_ = new Intent(context_, RegistAct_.class);
        }

        public Intent get() {
            return intent_;
        }

        public RegistAct_.IntentBuilder_ flags(int flags) {
            intent_.setFlags(flags);
            return this;
        }

        public void start() {
            context_.startActivity(intent_);
        }

        public void startForResult(int requestCode) {
            if (fragmentSupport_!= null) {
                fragmentSupport_.startActivityForResult(intent_, requestCode);
            } else {
                if (fragment_!= null) {
                    fragment_.startActivityForResult(intent_, requestCode);
                } else {
                    if (context_ instanceof Activity) {
                        ((Activity) context_).startActivityForResult(intent_, requestCode);
                    } else {
                        context_.startActivity(intent_);
                    }
                }
            }
        }

    }

}
