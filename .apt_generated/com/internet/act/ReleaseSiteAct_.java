//
// DO NOT EDIT THIS FILE, IT HAS BEEN GENERATED USING AndroidAnnotations 3.0.1.
//


package com.internet.act;

import java.util.ArrayList;
import android.app.Activity;
import android.content.Context;
import android.content.Intent;
import android.os.Bundle;
import android.os.Handler;
import android.os.Looper;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.ViewGroup.LayoutParams;
import android.widget.CheckBox;
import android.widget.CompoundButton;
import android.widget.CompoundButton.OnCheckedChangeListener;
import android.widget.TextView;
import com.baoyz.swipemenulistview.SwipeMenuListView;
import com.internet.http.api.ApiException;
import com.internet.http.data.response.GetCalenderListResponse.DriversCalender;
import com.internet.qianyue.R.id;
import com.internet.qianyue.R.layout;
import com.internet.view.HeaderView;
import com.internet.view.ReleaseSiteDateItemView;
import org.androidannotations.api.BackgroundExecutor;
import org.androidannotations.api.view.HasViews;
import org.androidannotations.api.view.OnViewChangedListener;
import org.androidannotations.api.view.OnViewChangedNotifier;

public final class ReleaseSiteAct_
    extends ReleaseSiteAct
    implements HasViews, OnViewChangedListener
{

    private final OnViewChangedNotifier onViewChangedNotifier_ = new OnViewChangedNotifier();
    private Handler handler_ = new Handler(Looper.getMainLooper());

    @Override
    public void onCreate(Bundle savedInstanceState) {
        OnViewChangedNotifier previousNotifier = OnViewChangedNotifier.replaceNotifier(onViewChangedNotifier_);
        init_(savedInstanceState);
        super.onCreate(savedInstanceState);
        OnViewChangedNotifier.replaceNotifier(previousNotifier);
        setContentView(layout.act_release_site);
    }

    private void init_(Bundle savedInstanceState) {
        OnViewChangedNotifier.registerOnViewChangedListener(this);
    }

    @Override
    public void setContentView(int layoutResID) {
        super.setContentView(layoutResID);
        onViewChangedNotifier_.notifyViewChanged(this);
    }

    @Override
    public void setContentView(View view, LayoutParams params) {
        super.setContentView(view, params);
        onViewChangedNotifier_.notifyViewChanged(this);
    }

    @Override
    public void setContentView(View view) {
        super.setContentView(view);
        onViewChangedNotifier_.notifyViewChanged(this);
    }

    public static ReleaseSiteAct_.IntentBuilder_ intent(Context context) {
        return new ReleaseSiteAct_.IntentBuilder_(context);
    }

    public static ReleaseSiteAct_.IntentBuilder_ intent(android.app.Fragment fragment) {
        return new ReleaseSiteAct_.IntentBuilder_(fragment);
    }

    public static ReleaseSiteAct_.IntentBuilder_ intent(android.support.v4.app.Fragment supportFragment) {
        return new ReleaseSiteAct_.IntentBuilder_(supportFragment);
    }

    @Override
    public void onViewChanged(HasViews hasViews) {
        date_item5 = ((ReleaseSiteDateItemView) hasViews.findViewById(id.date_item5));
        mSwitch = ((CheckBox) hasViews.findViewById(id.mSwitch));
        date_item4 = ((ReleaseSiteDateItemView) hasViews.findViewById(id.date_item4));
        mListView = ((SwipeMenuListView) hasViews.findViewById(id.listView));
        date_item7 = ((ReleaseSiteDateItemView) hasViews.findViewById(id.date_item7));
        date_item6 = ((ReleaseSiteDateItemView) hasViews.findViewById(id.date_item6));
        view_header = ((HeaderView) hasViews.findViewById(id.view_header));
        date_item1 = ((ReleaseSiteDateItemView) hasViews.findViewById(id.date_item1));
        text_site = ((TextView) hasViews.findViewById(id.text_site));
        text_repeat = ((TextView) hasViews.findViewById(id.text_repeat));
        date_item2 = ((ReleaseSiteDateItemView) hasViews.findViewById(id.date_item2));
        date_item3 = ((ReleaseSiteDateItemView) hasViews.findViewById(id.date_item3));
        text_copy = ((TextView) hasViews.findViewById(id.text_copy));
        {
            View view = hasViews.findViewById(id.date_item1);
            if (view!= null) {
                view.setOnClickListener(new OnClickListener() {


                    @Override
                    public void onClick(View view) {
                        ReleaseSiteAct_.this.clickDateItem(view);
                    }

                }
                );
            }
        }
        {
            View view = hasViews.findViewById(id.date_item2);
            if (view!= null) {
                view.setOnClickListener(new OnClickListener() {


                    @Override
                    public void onClick(View view) {
                        ReleaseSiteAct_.this.clickDateItem(view);
                    }

                }
                );
            }
        }
        {
            View view = hasViews.findViewById(id.date_item3);
            if (view!= null) {
                view.setOnClickListener(new OnClickListener() {


                    @Override
                    public void onClick(View view) {
                        ReleaseSiteAct_.this.clickDateItem(view);
                    }

                }
                );
            }
        }
        {
            View view = hasViews.findViewById(id.date_item4);
            if (view!= null) {
                view.setOnClickListener(new OnClickListener() {


                    @Override
                    public void onClick(View view) {
                        ReleaseSiteAct_.this.clickDateItem(view);
                    }

                }
                );
            }
        }
        {
            View view = hasViews.findViewById(id.date_item5);
            if (view!= null) {
                view.setOnClickListener(new OnClickListener() {


                    @Override
                    public void onClick(View view) {
                        ReleaseSiteAct_.this.clickDateItem(view);
                    }

                }
                );
            }
        }
        {
            View view = hasViews.findViewById(id.date_item6);
            if (view!= null) {
                view.setOnClickListener(new OnClickListener() {


                    @Override
                    public void onClick(View view) {
                        ReleaseSiteAct_.this.clickDateItem(view);
                    }

                }
                );
            }
        }
        {
            View view = hasViews.findViewById(id.date_item7);
            if (view!= null) {
                view.setOnClickListener(new OnClickListener() {


                    @Override
                    public void onClick(View view) {
                        ReleaseSiteAct_.this.clickDateItem(view);
                    }

                }
                );
            }
        }
        {
            View view = hasViews.findViewById(id.image_add);
            if (view!= null) {
                view.setOnClickListener(new OnClickListener() {


                    @Override
                    public void onClick(View view) {
                        ReleaseSiteAct_.this.clickAddTime();
                    }

                }
                );
            }
        }
        {
            View view = hasViews.findViewById(id.text_copy);
            if (view!= null) {
                view.setOnClickListener(new OnClickListener() {


                    @Override
                    public void onClick(View view) {
                        ReleaseSiteAct_.this.clickCopy();
                    }

                }
                );
            }
        }
        {
            View view = hasViews.findViewById(id.view_select_site);
            if (view!= null) {
                view.setOnClickListener(new OnClickListener() {


                    @Override
                    public void onClick(View view) {
                        ReleaseSiteAct_.this.clickSelectSite();
                    }

                }
                );
            }
        }
        {
            CompoundButton view = ((CompoundButton) hasViews.findViewById(id.mSwitch));
            if (view!= null) {
                view.setOnCheckedChangeListener(new OnCheckedChangeListener() {


                    @Override
                    public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) {
                        ReleaseSiteAct_.this.onSwitch(buttonView, isChecked);
                    }

                }
                );
            }
        }
        init();
    }

    @Override
    public void showLoading(final String tip) {
        handler_.post(new Runnable() {


            @Override
            public void run() {
                ReleaseSiteAct_.super.showLoading(tip);
            }

        }
        );
    }

    @Override
    public void closeLoading() {
        handler_.post(new Runnable() {


            @Override
            public void run() {
                ReleaseSiteAct_.super.closeLoading();
            }

        }
        );
    }

    @Override
    public void showLoading() {
        handler_.post(new Runnable() {


            @Override
            public void run() {
                ReleaseSiteAct_.super.showLoading();
            }

        }
        );
    }

    @Override
    public void onApiException(final ApiException ex) {
        handler_.post(new Runnable() {


            @Override
            public void run() {
                ReleaseSiteAct_.super.onApiException(ex);
            }

        }
        );
    }

    @Override
    public void closeInputKeyboard() {
        handler_.postDelayed(new Runnable() {


            @Override
            public void run() {
                ReleaseSiteAct_.super.closeInputKeyboard();
            }

        }
        , 200L);
    }

    @Override
    public void fullScreen(final boolean enable) {
        handler_.post(new Runnable() {


            @Override
            public void run() {
                ReleaseSiteAct_.super.fullScreen(enable);
            }

        }
        );
    }

    @Override
    public void showToast(final String content) {
        handler_.post(new Runnable() {


            @Override
            public void run() {
                ReleaseSiteAct_.super.showToast(content);
            }

        }
        );
    }

    @Override
    public void initDateItems() {
        handler_.post(new Runnable() {


            @Override
            public void run() {
                ReleaseSiteAct_.super.initDateItems();
            }

        }
        );
    }

    @Override
    public void refreshListView(final ArrayList<DriversCalender> result) {
        handler_.post(new Runnable() {


            @Override
            public void run() {
                ReleaseSiteAct_.super.refreshListView(result);
            }

        }
        );
    }

    @Override
    public void doBack() {
        BackgroundExecutor.execute(new BackgroundExecutor.Task("", 0, "") {


            @Override
            public void execute() {
                try {
                    ReleaseSiteAct_.super.doBack();
                } catch (Throwable e) {
                    Thread.getDefaultUncaughtExceptionHandler().uncaughtException(Thread.currentThread(), e);
                }
            }

        }
        );
    }

    @Override
    public void doCopy() {
        BackgroundExecutor.execute(new BackgroundExecutor.Task("", 0, "") {


            @Override
            public void execute() {
                try {
                    ReleaseSiteAct_.super.doCopy();
                } catch (Throwable e) {
                    Thread.getDefaultUncaughtExceptionHandler().uncaughtException(Thread.currentThread(), e);
                }
            }

        }
        );
    }

    @Override
    public void getAppointDate() {
        BackgroundExecutor.execute(new BackgroundExecutor.Task("", 0, "") {


            @Override
            public void execute() {
                try {
                    ReleaseSiteAct_.super.getAppointDate();
                } catch (Throwable e) {
                    Thread.getDefaultUncaughtExceptionHandler().uncaughtException(Thread.currentThread(), e);
                }
            }

        }
        );
    }

    @Override
    public void oneKeyClose(final boolean isChecked) {
        BackgroundExecutor.execute(new BackgroundExecutor.Task("", 0, "") {


            @Override
            public void execute() {
                try {
                    ReleaseSiteAct_.super.oneKeyClose(isChecked);
                } catch (Throwable e) {
                    Thread.getDefaultUncaughtExceptionHandler().uncaughtException(Thread.currentThread(), e);
                }
            }

        }
        );
    }

    @Override
    public void getCalenderList(final int position) {
        BackgroundExecutor.execute(new BackgroundExecutor.Task("", 0, "") {


            @Override
            public void execute() {
                try {
                    ReleaseSiteAct_.super.getCalenderList(position);
                } catch (Throwable e) {
                    Thread.getDefaultUncaughtExceptionHandler().uncaughtException(Thread.currentThread(), e);
                }
            }

        }
        );
    }

    public static class IntentBuilder_ {

        private Context context_;
        private final Intent intent_;
        private android.app.Fragment fragment_;
        private android.support.v4.app.Fragment fragmentSupport_;

        public IntentBuilder_(Context context) {
            context_ = context;
            intent_ = new Intent(context, ReleaseSiteAct_.class);
        }

        public IntentBuilder_(android.app.Fragment fragment) {
            fragment_ = fragment;
            context_ = fragment.getActivity();
            intent_ = new Intent(context_, ReleaseSiteAct_.class);
        }

        public IntentBuilder_(android.support.v4.app.Fragment fragment) {
            fragmentSupport_ = fragment;
            context_ = fragment.getActivity();
            intent_ = new Intent(context_, ReleaseSiteAct_.class);
        }

        public Intent get() {
            return intent_;
        }

        public ReleaseSiteAct_.IntentBuilder_ flags(int flags) {
            intent_.setFlags(flags);
            return this;
        }

        public void start() {
            context_.startActivity(intent_);
        }

        public void startForResult(int requestCode) {
            if (fragmentSupport_!= null) {
                fragmentSupport_.startActivityForResult(intent_, requestCode);
            } else {
                if (fragment_!= null) {
                    fragment_.startActivityForResult(intent_, requestCode);
                } else {
                    if (context_ instanceof Activity) {
                        ((Activity) context_).startActivityForResult(intent_, requestCode);
                    } else {
                        context_.startActivity(intent_);
                    }
                }
            }
        }

    }

}
